{"version":3,"sources":["src/gatsby-node.js"],"names":["pluginOptions","graphql","userOptions","plugins","defaultOptions","output","mergedOptions","hasOwnProperty","runQuery","query","siteUrl","site","siteMetadata","host","sitemap","resolve","policy","content","filename","join","publicPath","writeFile","onPostBuild","file","data","reject","err","handler","then","res","errors","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;uFAqCO,uBAAwCA,aAAxC;AAAA,QAA6BC,OAA7B,QAA6BA,OAA7B;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,uBADD,6BACoBF,aADpB;;;AAGL,mBAAOE,YAAYC,OAAnB;;AAEMC,0BALD,GAKkB;AACrBC,sBAAQ;AADa,aALlB;AASCC,yBATD,6BASsBF,cATtB,EASyCF,WATzC;;AAAA,kBAYH,CAACI,cAAcC,cAAd,CAA6B,MAA7B,CAAD,IACA,CAACD,cAAcC,cAAd,CAA6B,SAA7B,CAbE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmBOC,SAASP,OAAT,EAAkBQ,KAAlB,CAnBP;;AAAA;AAAA;AAiBiBC,mBAjBjB,SAgBDC,IAhBC,CAiBCC,YAjBD,CAiBiBF,OAjBjB;;;AAqBHJ,0BAAcO,IAAd,GAAqBH,OAArB;AACAJ,0BAAcQ,OAAd,GAAwB,cAAIC,OAAJ,CAAYL,OAAZ,EAAqB,aAArB,CAAxB;;AAtBG;AAyBGM,kBAzBH,GAyBqCV,aAzBrC,CAyBGU,MAzBH,EAyBWF,OAzBX,GAyBqCR,aAzBrC,CAyBWQ,OAzBX,EAyBoBD,IAzBpB,GAyBqCP,aAzBrC,CAyBoBO,IAzBpB,EAyB0BR,MAzB1B,GAyBqCC,aAzBrC,CAyB0BD,MAzB1B;AAAA;AAAA,mBA2BiB,iCAAU;AAC9BW,4BAD8B;AAE9BF,8BAF8B;AAG9BD;AAH8B,aAAV,CA3BjB;;AAAA;AA2BCI,mBA3BD;AAgCCC,oBAhCD,GAgCY,eAAKC,IAAL,CAAUC,UAAV,EAAsBf,MAAtB,CAhCZ;AAAA;AAAA,mBAkCQgB,UAAUH,QAAV,EAAoBD,OAApB,CAlCR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,W;;;;;AArCtB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMF,aAAa,UAAnB;AACA,IAAMX,yEAAN;;AASA,SAASY,SAAT,CAAmBE,IAAnB,EAAyBC,IAAzB,EAA+B;AAC7B,SAAO,sBAAY,UAACT,OAAD,EAAUU,MAAV,EAAqB;AACtC,iBAAGJ,SAAH,CAAaE,IAAb,EAAmBC,IAAnB,EAAyB,eAAO;AAC9B,UAAIE,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLX;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAED,SAASP,QAAT,CAAkBmB,OAAlB,EAA2BlB,KAA3B,EAAkC;AAChC,SAAOkB,QAAQlB,KAAR,EAAemB,IAAf,CAAoB,eAAO;AAChC,QAAIC,IAAIC,MAAR,EAAgB;AACd,YAAM,IAAIC,KAAJ,CAAUF,IAAIC,MAAJ,CAAWX,IAAX,CAAgB,IAAhB,CAAV,CAAN;AACD;;AAED,WAAOU,IAAIL,IAAX;AACD,GANM,CAAP;AAOD","file":"gatsby-node.js","sourcesContent":["import fs from 'fs';\nimport url from 'url';\nimport path from 'path';\nimport robotsTxt from 'generate-robotstxt';\n\nconst publicPath = './public';\nconst query = `{\n  site {\n    siteMetadata {\n      siteUrl\n    }\n  }\n}\n`;\n\nfunction writeFile(file, data) {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(file, data, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nfunction runQuery(handler, query) {\n  return handler(query).then(res => {\n    if (res.errors) {\n      throw new Error(res.errors.join(', '));\n    }\n\n    return res.data;\n  });\n}\n\nexport async function onPostBuild({ graphql }, pluginOptions) {\n  const userOptions = { ...pluginOptions };\n\n  delete userOptions.plugins;\n\n  const defaultOptions = {\n    output: '/robots.txt'\n  };\n\n  const mergedOptions = { ...defaultOptions, ...userOptions };\n\n  if (\n    !mergedOptions.hasOwnProperty('host') ||\n    !mergedOptions.hasOwnProperty('sitemap')\n  ) {\n    const {\n      site: {\n        siteMetadata: { siteUrl }\n      }\n    } = await runQuery(graphql, query);\n\n    mergedOptions.host = siteUrl;\n    mergedOptions.sitemap = url.resolve(siteUrl, 'sitemap.xml');\n  }\n\n  const { policy, sitemap, host, output } = mergedOptions;\n\n  const content = await robotsTxt({\n    policy,\n    sitemap,\n    host\n  });\n  const filename = path.join(publicPath, output);\n\n  return await writeFile(filename, content);\n}\n"]}